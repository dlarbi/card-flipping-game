/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var Card = __webpack_require__(1);
	var Board = __webpack_require__(3);
	
	var CardFlippingGame = __webpack_require__(4);
	__webpack_require__(5);
	
	var cardFlippingGame = new CardFlippingGame(Board, Card, {
	  boardSize: 24,
	  hideFlipDelay: 800
	});
	
	cardFlippingGame.render();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var TemplateEngine = __webpack_require__(2);
	
	var color_codes = {};
	function stringToColorCode(str) {
	  return (str in color_codes) ? color_codes[str] : (color_codes[str] = '#'+ ('000000' + (Math.random()*0xFFFFFF<<0).toString(16)).slice(-6));
	}
	
	var Card = function(value) {
	
	  this.uid = Math.random(0, 1000000);
	  this.value = value;
	  this.faceUp = false;
	  this.removed = false;
	  this.faceColor = stringToColorCode(this.value.toString());
	
	  this.flip = function() {
	    this.faceUp = !this.faceUp;
	  }
	
	  this.remove = function() {
	    this.removed = true;
	  }
	
	  this.getTemplate = function() {
	    return this.removed ?
	        '<div class="card_flipping_game__card" data-uid="<%this.uid%>">'+
	          '<img src="assets/images/check.png" class="card_flipping_game__card_icon--smaller"/>'+
	        '</div>'
	      : this.faceUp ?
	        '<div class="card_flipping_game__card card_flipping_game__card--bigger" data-uid="<%this.uid%>">'+
	          '<div class="card_flipping_game__card_face" style="background:<%this.faceColor%>;">'+
	            '<div class="card_flipping_game__card_value"><%this.value%></div>'+
	          '</div>'+
	        '</div>'
	      :
	        '<div class="card_flipping_game__card" data-uid="<%this.uid%>">'+
	          '<img src="assets/images/crown-icon.png" class="card_flipping_game__card_icon"/>'+
	        '</div>';
	  }
	
	  this.render = function(node) {
	    var cardComponent = TemplateEngine(this.getTemplate(), {
	      uid: this.uid,
	      value: this.value,
	      faceColor: this.faceColor
	    });
	    node.innerHTML = cardComponent
	  }
	}
	
	
	module.exports = Card;


/***/ },
/* 2 */
/***/ function(module, exports) {

	var TemplateEngine = function(html, options) {
	    var re = /<%([^%>]+)?%>/g, reExp = /(^( )?(if|for|else|switch|case|break|{|}))(.*)?/g, code = 'var r=[];\n', cursor = 0, match;
	    var add = function(line, js) {
	        js? (code += line.match(reExp) ? line + '\n' : 'r.push(' + line + ');\n') :
	            (code += line != '' ? 'r.push("' + line.replace(/"/g, '\\"') + '");\n' : '');
	        return add;
	    }
	    while(match = re.exec(html)) {
	        add(html.slice(cursor, match.index))(match[1], true);
	        cursor = match.index + match[0].length;
	    }
	    add(html.substr(cursor, html.length - cursor));
	    code += 'return r.join("");';
	    return new Function(code.replace(/[\r\t\n]/g, '')).apply(options);
	}
	
	module.exports = TemplateEngine;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var TemplateEngine = __webpack_require__(2);
	
	var Board = function(size) {
	  var _size = size;
	
	  this.getSize = function() {
	    return _size;
	  }
	
	  this.getTemplate = function() {
	    return '<div class="card_flipping_game__board">'+
	              '<%for(var i in this.cards) {%>' +
	                '<div class="card_flipping_game__board_space"></div>' +
	              '<%}%>' +
	           '</div>'
	
	  }
	
	  this.render = function(node) {
	    var N = _size;
	    var arrayOfLengthGameSize = Array.apply(null, {length: N}).map(Number.call, Number)
	    var boardComponent = TemplateEngine(this.getTemplate(), {
	      size: _size,
	      cards: arrayOfLengthGameSize
	    });
	    node.innerHTML = boardComponent
	  }
	}
	
	module.exports = Board;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var TemplateEngine = __webpack_require__(2);
	
	var CardFlippingGame = function(Board, Card, options) {
	
	  /*
	  * Private (indicate private members with "_" as prefix)
	  */
	  var _board = new Board(options.boardSize);
	  var _removedCount = 0;
	
	  /*
	  * Public.
	  */
	  this.cards = (function() {
	    var cards = [];
	    var cardValues = generateCardValues(_board.getSize());
	    for(var i=0;i<cardValues.length;i++) {
	      cards.push(new Card(cardValues[i]));
	    }
	
	    function generateCardValues(boardSize) {
	      var values = [];
	      for(var j=1;j<=boardSize/2;j++) {
	        values.push(j);
	      }
	      var dup = values.slice(0);
	      var result = values.concat(dup);
	      return result;
	    }
	
	    function shuffleArray(array) {
	      for (var i = array.length - 1; i > 0; i--) {
	        var j = Math.floor(Math.random() * (i + 1));
	        var temp = array[i];
	        array[i] = array[j];
	        array[j] = temp;
	      }
	      return array;
	    }
	    return shuffleArray(cards);
	  })();
	
	  this.faceUpCards = [];
	
	  this.render = function() {
	    this.renderBoard();
	    this.renderCards();
	    this.bindEvents();
	    if(_removedCount === _board.getSize()) {
	      alert('You win! Play again.');
	      location.reload();
	    }
	  }
	
	  this.playCard = function(card) {
	    if(this.faceUpCards.length < 2) {
	      card.flip();
	      this.analyzeBoard();
	      this.render();
	    }
	  }
	
	  this.unflipFaceupCards = function() {
	    this.faceUpCards.forEach(function(card, i, cards) {
	      card.flip();
	    })
	    this.faceUpCards = [];
	    this.render();
	  }
	
	  this.removeFaceupCards = function() {
	    this.faceUpCards.forEach(function(card, i, cards) {
	      card.remove();
	      _removedCount++;
	    })
	    this.faceUpCards = [];
	    this.render();
	  }
	
	  this.analyzeBoard = function() {
	    this.faceUpCards = [];
	    if(this.faceUpCards.length < 2) {
	      for(var i=0;i<this.cards.length;i++) {
	        var card = this.cards[i];
	        if(card.faceUp && !card.removed) {
	          this.faceUpCards.push(card)
	        }
	      }
	    }
	
	    if(this.faceUpCards.length === 2) {
	      var sameValues = this.faceUpCards[0].value === this.faceUpCards[1].value,
	          notSameCards = this.faceUpCards[0].uid != this.faceUpCards[1].uid;
	
	      if(sameValues && notSameCards) {
	        setTimeout(this.removeFaceupCards.bind(this), options.hideFlipDelay);
	      } else {
	        setTimeout(this.unflipFaceupCards.bind(this), options.hideFlipDelay);
	      }
	    }
	    this.render();
	  }
	
	  this.renderBoard = function() {
	    var gameWrapper = document.getElementById('card_flipping_game');
	    if(gameWrapper) _board.render(gameWrapper);
	  }
	
	  this.renderCards = function() {
	    var boardSpaceEls = document.getElementsByClassName('card_flipping_game__board_space');
	    for(var i=0;i<this.cards.length;i++) {
	      var card = this.cards[i];
	      if(boardSpaceEls[i]) card.render(boardSpaceEls[i]);
	    }
	  }
	
	  this.bindEvents = function() {
	    var cardEls = document.getElementsByClassName('card_flipping_game__card');
	    for (var i = 0; i < cardEls.length; i++) {
	      var eventType = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click'
	      cardEls[i].addEventListener(eventType, this.playCard.bind(this, this.cards[i]), false);
	    }
	  }
	}
	
	module.exports = CardFlippingGame;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(6);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(8)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./game.styles.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./game.styles.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(7)();
	// imports
	
	
	// module
	exports.push([module.id, "/*\n* We use the Block, Element, Modifier (BEM) pattern for our CSS.\n* Blocks:    i.e. .menu_list\n* Elements:  i.e. .menu_list__item\n* Modifiers: i.e. .menu_list__item--bold\n*/\n\nbody {\n  margin: 0;\n}\n\n.card_flipping_game {\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  background: rgba(73,155,234,1);\n\n}\n\n.card_flipping_game__board {\n  max-width: 800px;\n  margin: 0 auto;\n  height: 80%;\n  position: relative;\n  top: 10%;\n}\n\n.card_flipping_game__board_space {\n  height: 25%;\n  width: 15%;\n  float: left;\n}\n\n.card_flipping_game__card {\n  height: 90%;\n  max-width: 85%;\n  margin: 5% auto;\n  border: 1px solid #eaeaea;\n  text-align: center;\n  cursor: pointer;\n  background:#fff;\n  border-radius: 6px;\n  -webkit-box-shadow: 0 0 5px 0 rgba(0,0,0,.05);\n  -moz-box-shadow: 0 0 5px 0 rgba(0,0,0,.05);\n  box-shadow: 0 0 5px 0 rgba(0,0,0,.05);\n  transition: all .4s;\n}\n.card_flipping_game__card:hover {\n  -webkit-box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.6);\n  -moz-box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.6);\n  box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.6);\n}\n.card_flipping_game__card.card_flipping_game__card--bigger {\n  height: 95%;\n  max-width: 93%;\n  margin: 2% auto;\n  border: 1px solid #eaeaea;\n  text-align: center;\n  cursor: pointer;\n  background:#fff;\n  border-radius: 6px;\n  -webkit-box-shadow: 0 0 5px 0 rgba(0,0,0,.05);\n  -moz-box-shadow: 0 0 5px 0 rgba(0,0,0,.05);\n  box-shadow: 0 0 5px 0 rgba(0,0,0,.05);\n  transition: all .4s;\n}\n.card_flipping_game__card_value {\n  font-weight: bold;\n  font-size: 36px;\n  position: relative;\n  top: 50%;\n  margin-top: -18px;\n}\n.card_flipping_game__card_face {\n  height: 90%;\n  width: 86%;\n  margin: 7%;\n  float: left;\n  -webkit-box-shadow: inset 0px 0px 5px -1px rgba(0,0,0,0.35);\n  -moz-box-shadow: inset 0px 0px 5px -1px rgba(0,0,0,0.35);\n  box-shadow: inset 0px 0px 5px -1px rgba(0,0,0,0.35);\n}\n.card_flipping_game__card_icon {\n  position:relative;\n  height:60px;\n  top:50%;\n  margin-top:-30px;\n}\n.card_flipping_game__card_icon--smaller {\n  height:40px;\n  margin-top:-20px;\n  position:relative;\n  top:50%;\n}\n", ""]);
	
	// exports


/***/ },
/* 7 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,